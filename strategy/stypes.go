package strategy

import (
	"Snowballin/dataprovider"
	"Snowballin/pkg/broker" // Added for broker.TickerData and broker.OrderBookData
	"Snowballin/utilities"
	"context" // Was missing for Strategy interface
	"time"
)

type OHLCVBars []utilities.OHLCVBar

// MarketData encapsulates all market information and context needed by a strategy for a specific asset.
type MarketData struct {
	Asset           string
	OHLCVBars       []utilities.OHLCVBar
	OHLCVByTF       map[string][]utilities.OHLCVBar
	FearGreedIndex  dataprovider.FearGreedIndex
	PortfolioValue  float64
	BrokerTicker    broker.TickerData    // Ticker data from the primary broker (Kraken)
	BrokerOrderBook broker.OrderBookData // Order book data from the primary broker (Kraken)
	CurrentPrice    float64
	Volume24h       float64
}

// StrategySignal defines signals generated by a strategy for decision-making.
type StrategySignal struct {
	AssetPair        string    `json:"asset_pair"`
	Direction        string    `json:"direction"`  // "buy", "sell", or "hold"
	Confidence       float64   `json:"confidence"` // 0.0 - 1.0
	Reason           string    `json:"reason"`     // Description of the signal reason
	GeneratedAt      time.Time `json:"generated_at"`
	FearGreedIndex   int       `json:"fear_greed_index"`  // The integer value from dataprovider.FearGreedIndex
	RecommendedPrice float64   `json:"recommended_price"` // Recommended entry/exit price
	StopLossPrice    float64   `json:"stop_loss_price,omitempty"`
	TakeProfitPrice  float64   `json:"take_profit_price,omitempty"`
	CalculatedSize   float64   `json:"calculated_size,omitempty"` // Suggested size in BASE currency
}

// strategyImpl implements the Strategy interface.
type strategyImpl struct {
	logger *utilities.Logger
}

// Strategy defines the interface for all trading strategies.
type Strategy interface {
	GenerateSignals(ctx context.Context, data ConsolidatedMarketPicture, cfg utilities.AppConfig) ([]StrategySignal, error)
	GenerateExitSignal(ctx context.Context, data ConsolidatedMarketPicture, cfg utilities.AppConfig) (StrategySignal, bool)
}

// Signal represents a trading signal generated by the strategy.
type Signal struct {
	Direction string  // "buy", "sell", or "hold"
	Reason    string  // Explanation for the signal
	Weight    float64 // The confidence of the signal
}

// ProviderData holds the relevant data from a single source (e.g., kraken, coingecko).
type ProviderData struct {
	Name         string
	Weight       float64
	CurrentPrice float64
	OHLCVBars    []utilities.OHLCVBar
	OHLCVByTF    map[string][]utilities.OHLCVBar
}

// ConsolidatedMarketPicture brings together all data points for a single asset at a moment in time.
type ConsolidatedMarketPicture struct {
	AssetPair          string
	ProvidersData      []ProviderData
	BTCDominance       float64
	PortfolioValue     float64
	PeakPortfolioValue float64
	PrimaryOHLCVByTF   map[string][]utilities.OHLCVBar
	BrokerOrderBook    broker.OrderBookData
	FearGreedIndex     dataprovider.FearGreedIndex
}
