package strategy

import (
	"Snowballin/dataprovider"
	"Snowballin/pkg/broker" // Added for broker.TickerData and broker.OrderBookData
	"Snowballin/utilities"
	"context" // Was missing for Strategy interface
	"time"
)

type OHLCVBars []utilities.OHLCVBar

// MarketData encapsulates all market information and context needed by a strategy for a specific asset.
type MarketData struct {
	Asset           string
	OHLCVBars       []utilities.OHLCVBar
	OHLCVByTF       map[string][]utilities.OHLCVBar
	FearGreedIndex  dataprovider.FearGreedIndex
	PortfolioValue  float64
	BrokerTicker    broker.TickerData    // Ticker data from the primary broker (Kraken)
	BrokerOrderBook broker.OrderBookData // Order book data from the primary broker (Kraken)
	CurrentPrice    float64
	Volume24h       float64
}

// StrategySignal defines signals generated by a strategy for decision-making.
type StrategySignal struct {
	AssetPair        string    `json:"asset_pair"`
	Direction        string    `json:"direction"`  // "buy", "sell", or "hold"
	Confidence       float64   `json:"confidence"` // 0.0 - 1.0
	Reason           string    `json:"reason"`     // Description of the signal reason
	GeneratedAt      time.Time `json:"generated_at"`
	FearGreedIndex   int       `json:"fear_greed_index"`  // The integer value from dataprovider.FearGreedIndex
	RecommendedPrice float64   `json:"recommended_price"` // Recommended entry/exit price
	StopLossPrice    float64   `json:"stop_loss_price,omitempty"`
	TakeProfitPrice  float64   `json:"take_profit_price,omitempty"`
	CalculatedSize   float64   `json:"calculated_size,omitempty"` // Suggested size in BASE currency
}

// strategyImpl implements the Strategy interface.
type strategyImpl struct {
	logger *utilities.Logger
}

// Strategy defines the interface for all trading strategies.
type Strategy interface {
	GenerateSignals(ctx context.Context, data ConsolidatedMarketPicture, cfg utilities.AppConfig) ([]StrategySignal, error)
}

// ProviderData holds market data from a single named provider relevant for consensus.
type ProviderData struct {
	Name string // e.g., "kraken", "coingecko", "coinmarketcap"
	// Weight assigned to this provider's data/signal in consensus calculation.
	// This will be populated from cfg.DataProviderWeights.
	Weight float64
	// CurrentPrice as reported by this provider.
	CurrentPrice float64
	// OHLCVBars for the strategy's main evaluation timeframe (e.g., baseTimeframe) from this provider.
	// This allows indicators to be calculated per provider if desired.
	OHLCVBars []utilities.OHLCVBar
	// LatestTicker holds broader market data from this provider if available
	// For Kraken, this could be broker.TickerData.
	// For CG/CMC, this could be dataprovider.MarketData.
	// Using interface{} for flexibility or define a common ticker subset.
	// For now, let's keep it simple and focus on Price and OHLCV.
	// LatestTicker interface{}
}

// ConsolidatedMarketPicture holds all data aggregated from multiple sources for a strategy decision.
type ConsolidatedMarketPicture struct {
	AssetPair string // The common asset pair symbol, e.g., "BTC/USD"

	// Data from each configured and active provider.
	// The first element could conventionally be the primary broker (Kraken).
	ProvidersData []ProviderData

	BTCDominance       float64
	FearGreedIndex     dataprovider.FearGreedIndex // Global market sentiment
	PortfolioValue     float64                     // Current total portfolio value
	PeakPortfolioValue float64                     // **ADDED**: Historical peak portfolio value for drawdown calculations.

	// Primary broker's detailed data, still useful for execution context and deep dives.
	BrokerOrderBook broker.OrderBookData // Order book from the primary broker
	// Multi-timeframe OHLCV data, likely still sourced primarily from the broker due to API call intensity.
	// The strategy can decide if it recalculates MTF for other providers or relies on broker's MTF.
	PrimaryOHLCVByTF map[string][]utilities.OHLCVBar
}
